{"version":3,"file":"options-prompt.js","sourceRoot":"","sources":["../../../../src/cli/prompts/webhook/options-prompt.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,aAAa,EACb,gBAAgB,EAChB,0BAA0B,EAC1B,oBAAoB,EACpB,kBAAkB,EAClB,WAAW,GACZ,MAAM,cAAc,CAAA;AACrB,OAAO,EACL,eAAe,EAEf,wBAAwB,EACxB,iCAAiC,GAClC,MAAM,2CAA2C,CAAA;AAClD,OAAO,EAAC,KAAK,EAAC,MAAM,kBAAkB,CAAA;AAatC;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,KAA0B,EAC1B,iBAA2B;IAE3B,MAAM,OAAO,GAA0B;QACrC,KAAK,EAAE,EAAE;QACT,UAAU,EAAE,EAAE;QACd,YAAY,EAAE,EAAE;QAChB,cAAc,EAAE,EAAE;QAClB,OAAO,EAAE,EAAE;KACZ,CAAA;IAED,MAAM,gBAAgB,GAAG,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;IAErD,IAAI,gBAAgB,EAAE;QACpB,MAAM,gBAAgB,GAAI,KAAK,CAAC,UAAqB,CAAC,IAAI,EAAE,CAAA;QAC5D,IAAI,iBAAiB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;YAChD,OAAO,CAAC,UAAU,GAAG,gBAAgB,CAAA;SACtC;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,KAAK,CACnB,gBAAgB,gBAAgB,kBAAkB,EAClD,mBAAmB,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EACjD,CAAC,0CAA0C,CAAC,CAC7C,CAAA;SACF;KACF;SAAM;QACL,OAAO,CAAC,UAAU,GAAG,MAAM,gBAAgB,CAAC,iBAAiB,CAAC,CAAA;KAC/D;IAED,MAAM,YAAY,GAAG,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA;IACrD,MAAM,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;IAE/C,IAAI,YAAY,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE;QAClE,MAAM,IAAI,KAAK,CAAC,KAAK,CACnB,gCAAgC,EAChC,GAAG,eAAe,CAAC,IAAI,KAAK,eAAe,CAAC,MAAM,SAAS,eAAe,CAAC,WAAW,cAAc,EACpG,CAAC,wCAAwC,CAAC,CAC3C,CAAA;KACF;IAED,IAAI,YAAY,IAAI,aAAa,EAAE;QACjC,IAAI,iCAAiC,CAAC,KAAK,CAAC,OAAiB,EAAE,KAAK,CAAC,cAAwB,CAAC,EAAE;YAC9F,OAAO,CAAC,OAAO,GAAI,KAAK,CAAC,OAAkB,CAAC,IAAI,EAAE,CAAA;YAClD,OAAO,CAAC,cAAc,GAAG,sBAAsB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;SACjE;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,KAAK,CACnB,oDAAoD,EACpD,kEAAkE,EAClE,0BAA0B,CAAC,KAAK,CAAC,cAAwB,CAAC,CAC3D,CAAA;SACF;KACF;IAED,IAAI,CAAC,YAAY,IAAI,aAAa,EAAE;QAClC,OAAO,CAAC,OAAO,GAAI,KAAK,CAAC,OAAkB,CAAC,IAAI,EAAE,CAAA;QAClD,OAAO,CAAC,cAAc,GAAG,sBAAsB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;KACjE;IAED,OAAO,CAAC,KAAK,GAAG,MAAM,eAAe,CAAC,KAAK,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;IAC/D,OAAO,CAAC,YAAY,GAAG,MAAM,eAAe,CAAC,KAAK,CAAC,YAAY,EAAE,kBAAkB,CAAC,CAAA;IAEpF,IAAI,CAAC,YAAY,IAAI,CAAC,aAAa,EAAE;QACnC,MAAM,MAAM,GAAG,MAAM,oBAAoB,EAAE,CAAA;QAC3C,OAAO,CAAC,OAAO,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,CAAA;QAC7C,OAAO,CAAC,cAAc,GAAG,sBAAsB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;KACjE;IAED,IAAI,YAAY,IAAI,CAAC,aAAa,EAAE;QAClC,OAAO,CAAC,OAAO,GAAG,MAAM,aAAa,CAAC,KAAK,CAAC,cAAwB,CAAC,CAAA;QACrE,OAAO,CAAC,cAAc,GAAG,sBAAsB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;KACjE;IAED,OAAO,OAAO,CAAA;AAChB,CAAC;AAED,KAAK,UAAU,eAAe,CAAC,KAAyB,EAAE,MAA6B;IACrF,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,KAAgB,CAAC,CAAC,CAAC,MAAM,EAAE,CAAA;AACzD,CAAC;AAED,SAAS,UAAU,CAAC,IAAwB;IAC1C,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,OAAO,KAAK,CAAA;KACb;IAED,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;AACxB,CAAC;AAED,SAAS,uBAAuB,CAAC,KAAyB;IACxD,OAAO,KAAK,KAAK,eAAe,CAAC,IAAI,IAAI,KAAK,KAAK,eAAe,CAAC,MAAM,IAAI,KAAK,KAAK,eAAe,CAAC,WAAW,CAAA;AACpH,CAAC;AAED,SAAS,sBAAsB,CAAC,OAAe;IAC7C,MAAM,MAAM,GAAG,wBAAwB,CAAC,OAAO,CAAC,CAAA;IAEhD,IAAI,MAAM,KAAK,SAAS,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,KAAK,CACnB,8CAA8C,EAC9C,2BAA2B,eAAe,CAAC,IAAI,KAAK,eAAe,CAAC,MAAM,OAAO,eAAe,CAAC,WAAW,EAAE,CAC/G,CAAA;KACF;IAED,OAAO,MAAM,CAAA;AACf,CAAC","sourcesContent":["import {\n  addressPrompt,\n  apiVersionPrompt,\n  deliveryMethodInstructions,\n  deliveryMethodPrompt,\n  sharedSecretPrompt,\n  topicPrompt,\n} from './trigger.js'\nimport {\n  DELIVERY_METHOD,\n  WebhookTriggerOptions,\n  deliveryMethodForAddress,\n  isAddressAllowedForDeliveryMethod,\n} from '../../services/webhook/trigger-options.js'\nimport {error} from '@shopify/cli-kit'\n\n/**\n * Flags collected from the command line parameters\n */\nexport interface WebhookTriggerFlags {\n  topic?: string\n  apiVersion?: string\n  deliveryMethod?: string\n  address?: string\n  sharedSecret?: string\n}\n\n/**\n * Collect all required data, validate and transform values into options for the Service\n * Some UX decisions:\n * - Flags validation will happen before we request any prompts\n * - Any option not passed as a flag will be requested via prompt\n * - In the case of having a flag for address and not for delivery-method, the delivery-method will be inferred from it\n * - An http delivery method sent to a localhost address will be transformed into a localhost delivery method.\n *   `localhost` is only internal: it requests core to return the data so that the plugin will deliver it locally without\n *   needing ngrok\n *\n * @param flags - Flags collected from the command-line arguments\n * @param availableVersions - Available API Versions\n * @returns flags/prompts transformed into WebhookTriggerOptions to pass to the service\n */\nexport async function optionsPrompt(\n  flags: WebhookTriggerFlags,\n  availableVersions: string[],\n): Promise<WebhookTriggerOptions> {\n  const options: WebhookTriggerOptions = {\n    topic: '',\n    apiVersion: '',\n    sharedSecret: '',\n    deliveryMethod: '',\n    address: '',\n  }\n\n  const apiVersionPassed = flagPassed(flags.apiVersion)\n\n  if (apiVersionPassed) {\n    const passedApiVersion = (flags.apiVersion as string).trim()\n    if (availableVersions.includes(passedApiVersion)) {\n      options.apiVersion = passedApiVersion\n    } else {\n      throw new error.Abort(\n        `Api Version '${passedApiVersion}' does not exist`,\n        `Allowed values: ${availableVersions.join(', ')}`,\n        ['Try again with a valid api-version value'],\n      )\n    }\n  } else {\n    options.apiVersion = await apiVersionPrompt(availableVersions)\n  }\n\n  const methodPassed = flagPassed(flags.deliveryMethod)\n  const addressPassed = flagPassed(flags.address)\n\n  if (methodPassed && !validDeliveryMethodFlag(flags.deliveryMethod)) {\n    throw new error.Abort(\n      'Invalid Delivery Method passed',\n      `${DELIVERY_METHOD.HTTP}, ${DELIVERY_METHOD.PUBSUB}, and ${DELIVERY_METHOD.EVENTBRIDGE} are allowed`,\n      ['Try again with a valid delivery method'],\n    )\n  }\n\n  if (methodPassed && addressPassed) {\n    if (isAddressAllowedForDeliveryMethod(flags.address as string, flags.deliveryMethod as string)) {\n      options.address = (flags.address as string).trim()\n      options.deliveryMethod = inferMethodFromAddress(options.address)\n    } else {\n      throw new error.Abort(\n        \"Can't deliver your webhook payload to this address\",\n        \"Run 'shopify webhook trigger --address=<VALUE>' with a valid URL\",\n        deliveryMethodInstructions(flags.deliveryMethod as string),\n      )\n    }\n  }\n\n  if (!methodPassed && addressPassed) {\n    options.address = (flags.address as string).trim()\n    options.deliveryMethod = inferMethodFromAddress(options.address)\n  }\n\n  options.topic = await useFlagOrPrompt(flags.topic, topicPrompt)\n  options.sharedSecret = await useFlagOrPrompt(flags.sharedSecret, sharedSecretPrompt)\n\n  if (!methodPassed && !addressPassed) {\n    const method = await deliveryMethodPrompt()\n    options.address = await addressPrompt(method)\n    options.deliveryMethod = inferMethodFromAddress(options.address)\n  }\n\n  if (methodPassed && !addressPassed) {\n    options.address = await addressPrompt(flags.deliveryMethod as string)\n    options.deliveryMethod = inferMethodFromAddress(options.address)\n  }\n\n  return options\n}\n\nasync function useFlagOrPrompt(value: string | undefined, prompt: () => Promise<string>): Promise<string> {\n  return flagPassed(value) ? (value as string) : prompt()\n}\n\nfunction flagPassed(flag: string | undefined) {\n  if (flag === undefined) {\n    return false\n  }\n\n  return flag.length > 0\n}\n\nfunction validDeliveryMethodFlag(value: string | undefined): boolean {\n  return value === DELIVERY_METHOD.HTTP || value === DELIVERY_METHOD.PUBSUB || value === DELIVERY_METHOD.EVENTBRIDGE\n}\n\nfunction inferMethodFromAddress(address: string): string {\n  const method = deliveryMethodForAddress(address)\n\n  if (method === undefined) {\n    throw new error.Abort(\n      'No delivery method available for the address',\n      `Use a valid address for ${DELIVERY_METHOD.HTTP}, ${DELIVERY_METHOD.PUBSUB} or ${DELIVERY_METHOD.EVENTBRIDGE}`,\n    )\n  }\n\n  return method\n}\n"]}
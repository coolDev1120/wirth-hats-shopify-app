'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var sqlite3 = require('sqlite3');
var shopifyApi = require('@shopify/shopify-api');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var sqlite3__default = /*#__PURE__*/_interopDefaultLegacy(sqlite3);

const defaultSQLiteSessionStorageOptions = {
  sessionTableName: 'shopify_sessions'
};
class SQLiteSessionStorage {
  constructor(filename, opts = {}) {
    this.filename = filename;
    this.options = void 0;
    this.db = void 0;
    this.ready = void 0;
    this.options = {
      ...defaultSQLiteSessionStorageOptions,
      ...opts
    };
    this.db = new sqlite3__default["default"].Database(this.filename);
    this.ready = this.init();
  }
  async storeSession(session) {
    await this.ready;

    // Note milliseconds to seconds conversion for `expires` property
    const entries = session.toPropertyArray().map(([key, value]) => key === 'expires' ? [key, Math.floor(value / 1000)] : [key, value]);
    const query = `
      INSERT OR REPLACE INTO ${this.options.sessionTableName}
      (${entries.map(([key]) => key).join(', ')})
      VALUES (${entries.map(() => '?').join(', ')});
    `;
    await this.query(query, entries.map(([_key, value]) => value));
    return true;
  }
  async loadSession(id) {
    await this.ready;
    const query = `
      SELECT * FROM ${this.options.sessionTableName}
      WHERE id = ?;
    `;
    const rows = await this.query(query, [id]);
    if (!Array.isArray(rows) || (rows === null || rows === void 0 ? void 0 : rows.length) !== 1) return undefined;
    const rawResult = rows[0];
    return this.databaseRowToSession(rawResult);
  }
  async deleteSession(id) {
    await this.ready;
    const query = `
      DELETE FROM ${this.options.sessionTableName}
      WHERE id = ?;
    `;
    await this.query(query, [id]);
    return true;
  }
  async deleteSessions(ids) {
    await this.ready;
    const query = `
      DELETE FROM ${this.options.sessionTableName}
      WHERE id IN (${ids.map(() => '?').join(',')});
    `;
    await this.query(query, ids);
    return true;
  }
  async findSessionsByShop(shop) {
    await this.ready;
    const query = `
      SELECT * FROM ${this.options.sessionTableName}
      WHERE shop = ?;
    `;
    const rows = await this.query(query, [shop]);
    if (!Array.isArray(rows) || (rows === null || rows === void 0 ? void 0 : rows.length) === 0) return [];
    const results = rows.map(row => {
      return this.databaseRowToSession(row);
    });
    return results;
  }
  async hasSessionTable() {
    const query = `
    SELECT name FROM sqlite_schema
    WHERE
      type = 'table' AND
      name = ?;
    `;
    const rows = await this.query(query, [this.options.sessionTableName]);
    return rows.length === 1;
  }
  async init() {
    const hasSessionTable = await this.hasSessionTable();
    if (!hasSessionTable) {
      const query = `
        CREATE TABLE ${this.options.sessionTableName} (
          id varchar(255) NOT NULL PRIMARY KEY,
          shop varchar(255) NOT NULL,
          state varchar(255) NOT NULL,
          isOnline integer NOT NULL,
          expires integer,
          scope varchar(255),
          accessToken varchar(255),
          onlineAccessInfo varchar(255)
        )
      `;
      await this.query(query);
    }
  }
  query(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.all(sql, params, (err, result) => {
        if (err) {
          reject(err);
          return;
        }
        resolve(result);
      });
    });
  }
  databaseRowToSession(row) {
    // convert seconds to milliseconds prior to creating Session object
    if (row.expires) row.expires *= 1000;
    return shopifyApi.Session.fromPropertyArray(Object.entries(row));
  }
}

exports.SQLiteSessionStorage = SQLiteSessionStorage;

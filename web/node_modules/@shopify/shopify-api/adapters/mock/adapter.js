"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockRuntimeString = exports.mockFetch = exports.mockConvertHeaders = exports.mockConvertResponse = exports.mockConvertRequest = void 0;
var tslib_1 = require("tslib");
var http_1 = require("../../runtime/http");
var mock_test_requests_1 = require("./mock_test_requests");
function mockConvertRequest(adapterArgs) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, Promise.resolve(adapterArgs.rawRequest)];
        });
    });
}
exports.mockConvertRequest = mockConvertRequest;
function mockConvertResponse(response, _adapterArgs) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, Promise.resolve(response)];
        });
    });
}
exports.mockConvertResponse = mockConvertResponse;
function mockConvertHeaders(headers, _adapterArgs) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, Promise.resolve(headers)];
        });
    });
}
exports.mockConvertHeaders = mockConvertHeaders;
function mockFetch(_a) {
    var url = _a.url, method = _a.method, _b = _a.headers, headers = _b === void 0 ? {} : _b, body = _a.body;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var next;
        return tslib_1.__generator(this, function (_c) {
            mock_test_requests_1.mockTestRequests.requestList.push({
                url: url,
                method: method,
                headers: (0, http_1.canonicalizeHeaders)(headers),
                body: body,
            });
            next = mock_test_requests_1.mockTestRequests.responseList.shift();
            if (!next) {
                throw new Error("Missing mock for ".concat(method, " to ").concat(url, ", have you queued all required responses?"));
            }
            if (next instanceof Error) {
                throw next;
            }
            return [2 /*return*/, next];
        });
    });
}
exports.mockFetch = mockFetch;
function mockRuntimeString() {
    return 'Mock adapter';
}
exports.mockRuntimeString = mockRuntimeString;
//# sourceMappingURL=adapter.js.map
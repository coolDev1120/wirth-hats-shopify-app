"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.workerRuntimeString = exports.workerCreateDefaultStorage = exports.workerFetch = exports.workerConvertHeaders = exports.workerConvertResponse = exports.workerConvertRequest = void 0;
var tslib_1 = require("tslib");
var error_1 = require("../../lib/error");
var http_1 = require("../../runtime/http");
function workerConvertRequest(adapterArgs) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var request, headers, _b, _c, _d, key, value, url;
        var e_1, _e;
        return tslib_1.__generator(this, function (_f) {
            request = adapterArgs.rawRequest;
            headers = {};
            try {
                for (_b = tslib_1.__values(request.headers.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    _d = tslib_1.__read(_c.value, 2), key = _d[0], value = _d[1];
                    (0, http_1.addHeader)(headers, key, value);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_e = _b.return)) _e.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            url = new URL(request.url);
            return [2 /*return*/, {
                    headers: headers,
                    method: (_a = request.method) !== null && _a !== void 0 ? _a : 'GET',
                    url: "".concat(url.pathname).concat(url.search).concat(url.hash),
                }];
        });
    });
}
exports.workerConvertRequest = workerConvertRequest;
function workerConvertResponse(resp, adapterArgs) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _b, _c;
        var _d;
        return tslib_1.__generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _b = Response.bind;
                    _c = [void 0, resp.body];
                    _d = {
                        status: resp.statusCode,
                        statusText: resp.statusText
                    };
                    return [4 /*yield*/, workerConvertHeaders((_a = resp.headers) !== null && _a !== void 0 ? _a : {}, adapterArgs)];
                case 1: return [2 /*return*/, new (_b.apply(Response, _c.concat([(_d.headers = _e.sent(),
                            _d)])))()];
            }
        });
    });
}
exports.workerConvertResponse = workerConvertResponse;
function workerConvertHeaders(headers, _adapterArgs) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, Promise.resolve((0, http_1.flatHeaders)(headers !== null && headers !== void 0 ? headers : {}))];
        });
    });
}
exports.workerConvertHeaders = workerConvertHeaders;
function workerFetch(_a) {
    var url = _a.url, method = _a.method, _b = _a.headers, headers = _b === void 0 ? {} : _b, body = _a.body;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var resp, respBody;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, fetch(url, { method: method, headers: (0, http_1.flatHeaders)(headers), body: body })];
                case 1:
                    resp = _c.sent();
                    return [4 /*yield*/, resp.text()];
                case 2:
                    respBody = _c.sent();
                    return [2 /*return*/, {
                            statusCode: resp.status,
                            statusText: resp.statusText,
                            body: respBody,
                            headers: (0, http_1.canonicalizeHeaders)(Object.fromEntries(resp.headers.entries())),
                        }];
            }
        });
    });
}
exports.workerFetch = workerFetch;
function workerCreateDefaultStorage() {
    throw new error_1.ShopifyError('You must specify a session storage implementation for CloudFlare workers');
}
exports.workerCreateDefaultStorage = workerCreateDefaultStorage;
function workerRuntimeString() {
    return 'Cloudflare worker';
}
exports.workerRuntimeString = workerRuntimeString;
//# sourceMappingURL=adapter.js.map
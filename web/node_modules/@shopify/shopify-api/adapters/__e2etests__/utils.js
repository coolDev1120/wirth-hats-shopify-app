"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = exports.matchHeaders = void 0;
var tslib_1 = require("tslib");
var http_1 = require("../../runtime/http");
var types_1 = require("../../lib/types");
var scopes_1 = require("../../lib/auth/scopes");
function matchHeaders(received, expected) {
    var e_1, _a;
    var expectedHeadersCorrect = true;
    var canonicalizedReceived = (0, http_1.canonicalizeHeaders)(received);
    var canonicalizedExpected = (0, http_1.canonicalizeHeaders)(expected);
    if (Object.keys(canonicalizedExpected).length > 0) {
        try {
            for (var _b = tslib_1.__values(Object.entries(canonicalizedExpected)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), expectedKey = _d[0], expectedValues = _d[1];
                expectedHeadersCorrect =
                    expectedHeadersCorrect &&
                        expectedKey in canonicalizedReceived &&
                        received[expectedKey][0].includes(expectedValues[0]);
                if (!expectedHeadersCorrect)
                    return false;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return expectedHeadersCorrect;
}
exports.matchHeaders = matchHeaders;
exports.config = {
    apiKey: 'test_key',
    apiSecretKey: 'test_secret_key',
    scopes: new scopes_1.AuthScopes('test_scope'),
    hostName: 'test_host_name',
    hostScheme: 'https',
    apiVersion: types_1.LATEST_API_VERSION,
    isEmbeddedApp: true,
    isPrivateApp: false,
    logger: {
        log: function () { return Promise.resolve(); },
        level: types_1.LogSeverity.Debug,
        httpRequests: false,
        timestamps: false,
    },
};
//# sourceMappingURL=utils.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runEnvironments = exports.shutdownEnvironments = void 0;
var tslib_1 = require("tslib");
var node_fetch_1 = tslib_1.__importDefault(require("node-fetch"));
function sleep(ms) {
    return new Promise(function (resolve) {
        setTimeout(resolve, ms);
    });
}
function shutdownEnvironments(environments) {
    var e_1, _a;
    try {
        for (var environments_1 = tslib_1.__values(environments), environments_1_1 = environments_1.next(); !environments_1_1.done; environments_1_1 = environments_1.next()) {
            var env = environments_1_1.value;
            if (typeof env.process.pid !== 'undefined') {
                process.kill(-env.process.pid);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (environments_1_1 && !environments_1_1.done && (_a = environments_1.return)) _a.call(environments_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
exports.shutdownEnvironments = shutdownEnvironments;
function serverReady(domain) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var response, err_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, (0, node_fetch_1.default)(domain)];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response.status === 200];
                case 2:
                    err_1 = _a.sent();
                    return [2 /*return*/, false];
                case 3: return [2 /*return*/];
            }
        });
    });
}
function allEnvironmentsReady(environments) {
    return environments.map(function (env) { return env.ready; }).every(function (ready) { return ready; });
}
function runEnvironments(environments) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var maxAttempts, environments_2, environments_2_1, env, attempts, ready, e_2_1;
        var e_2, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    maxAttempts = 5;
                    if (allEnvironmentsReady(environments))
                        return [2 /*return*/, true];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 9, 10, 11]);
                    environments_2 = tslib_1.__values(environments), environments_2_1 = environments_2.next();
                    _b.label = 2;
                case 2:
                    if (!!environments_2_1.done) return [3 /*break*/, 8];
                    env = environments_2_1.value;
                    attempts = 0;
                    ready = false;
                    _b.label = 3;
                case 3:
                    if (!(!ready && attempts < maxAttempts)) return [3 /*break*/, 6];
                    attempts++;
                    return [4 /*yield*/, sleep(100)];
                case 4:
                    _b.sent();
                    return [4 /*yield*/, serverReady(env.domain)];
                case 5:
                    ready = _b.sent();
                    return [3 /*break*/, 3];
                case 6:
                    env.ready = ready;
                    _b.label = 7;
                case 7:
                    environments_2_1 = environments_2.next();
                    return [3 /*break*/, 2];
                case 8: return [3 /*break*/, 11];
                case 9:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 11];
                case 10:
                    try {
                        if (environments_2_1 && !environments_2_1.done && (_a = environments_2.return)) _a.call(environments_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 11: return [2 /*return*/, allEnvironmentsReady(environments)];
            }
        });
    });
}
exports.runEnvironments = runEnvironments;
//# sourceMappingURL=test_environments.js.map
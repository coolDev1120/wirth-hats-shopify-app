"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addHostToCallbackUrl = exports.handlerIdentifier = exports.getHandlers = exports.getTopicsAdded = exports.addHandlers = exports.topicForStorage = exports.registry = void 0;
var tslib_1 = require("tslib");
var error_1 = require("../error");
var logger_1 = require("../logger");
var types_1 = require("./types");
function registry() {
    return {};
}
exports.registry = registry;
function topicForStorage(topic) {
    return topic.toUpperCase().replace(/\//g, '_');
}
exports.topicForStorage = topicForStorage;
function addHandlers(config, webhookRegistry) {
    return function addHandlers(handlersToAdd) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, topic, handlers, topicKey, handlers_1, handlers_1_1, handler, e_1_1, e_2_1;
            var e_2, _d, e_1, _e;
            return tslib_1.__generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _f.trys.push([0, 14, 15, 16]);
                        _a = tslib_1.__values(Object.entries(handlersToAdd)), _b = _a.next();
                        _f.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 13];
                        _c = tslib_1.__read(_b.value, 2), topic = _c[0], handlers = _c[1];
                        topicKey = topicForStorage(topic);
                        if (!Array.isArray(handlers)) return [3 /*break*/, 10];
                        _f.label = 2;
                    case 2:
                        _f.trys.push([2, 7, 8, 9]);
                        handlers_1 = (e_1 = void 0, tslib_1.__values(handlers)), handlers_1_1 = handlers_1.next();
                        _f.label = 3;
                    case 3:
                        if (!!handlers_1_1.done) return [3 /*break*/, 6];
                        handler = handlers_1_1.value;
                        return [4 /*yield*/, mergeOrAddHandler(config, webhookRegistry, topicKey, handler)];
                    case 4:
                        _f.sent();
                        _f.label = 5;
                    case 5:
                        handlers_1_1 = handlers_1.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_1_1 = _f.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (handlers_1_1 && !handlers_1_1.done && (_e = handlers_1.return)) _e.call(handlers_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 9: return [3 /*break*/, 12];
                    case 10: return [4 /*yield*/, mergeOrAddHandler(config, webhookRegistry, topicKey, handlers)];
                    case 11:
                        _f.sent();
                        _f.label = 12;
                    case 12:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 13: return [3 /*break*/, 16];
                    case 14:
                        e_2_1 = _f.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 16];
                    case 15:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
}
exports.addHandlers = addHandlers;
function getTopicsAdded(webhookRegistry) {
    return function getTopicsAdded() {
        return Object.keys(webhookRegistry);
    };
}
exports.getTopicsAdded = getTopicsAdded;
function getHandlers(webhookRegistry) {
    return function getHandlers(topic) {
        return webhookRegistry[topicForStorage(topic)] || [];
    };
}
exports.getHandlers = getHandlers;
function handlerIdentifier(config, handler) {
    var prefix = handler.deliveryMethod;
    switch (handler.deliveryMethod) {
        case types_1.DeliveryMethod.Http:
            return "".concat(prefix, "_").concat(addHostToCallbackUrl(config, handler.callbackUrl));
        case types_1.DeliveryMethod.EventBridge:
            return "".concat(prefix, "_").concat(handler.arn);
        case types_1.DeliveryMethod.PubSub:
            return "".concat(prefix, "_").concat(handler.pubSubProject, ":").concat(handler.pubSubTopic);
        default:
            throw new error_1.InvalidDeliveryMethodError("Unrecognized delivery method '".concat(handler.deliveryMethod, "'"));
    }
}
exports.handlerIdentifier = handlerIdentifier;
function addHostToCallbackUrl(config, callbackUrl) {
    if (callbackUrl.startsWith('/')) {
        return "".concat(config.hostScheme, "://").concat(config.hostName).concat(callbackUrl);
    }
    else {
        return callbackUrl;
    }
}
exports.addHostToCallbackUrl = addHostToCallbackUrl;
function mergeOrAddHandler(config, webhookRegistry, topic, handler) {
    var _a, _b, _c;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var identifier, _d, _e, _i, index, existingHandler, existingIdentifier;
        return tslib_1.__generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    (_a = handler.includeFields) === null || _a === void 0 ? void 0 : _a.sort();
                    (_b = handler.metafieldNamespaces) === null || _b === void 0 ? void 0 : _b.sort();
                    if (handler.deliveryMethod === types_1.DeliveryMethod.Http) {
                        (_c = handler.privateMetafieldNamespaces) === null || _c === void 0 ? void 0 : _c.sort();
                    }
                    if (!(topic in webhookRegistry)) {
                        webhookRegistry[topic] = [handler];
                        return [2 /*return*/];
                    }
                    identifier = handlerIdentifier(config, handler);
                    _d = [];
                    for (_e in webhookRegistry[topic])
                        _d.push(_e);
                    _i = 0;
                    _f.label = 1;
                case 1:
                    if (!(_i < _d.length)) return [3 /*break*/, 5];
                    index = _d[_i];
                    if (!Object.prototype.hasOwnProperty.call(webhookRegistry[topic], index)) {
                        return [3 /*break*/, 4];
                    }
                    existingHandler = webhookRegistry[topic][index];
                    existingIdentifier = handlerIdentifier(config, existingHandler);
                    if (identifier !== existingIdentifier) {
                        return [3 /*break*/, 4];
                    }
                    if (!(handler.deliveryMethod === types_1.DeliveryMethod.Http)) return [3 /*break*/, 3];
                    return [4 /*yield*/, (0, logger_1.logger)(config).info("Detected multiple handlers for '".concat(topic, "', webhooks.process will call them sequentially"))];
                case 2:
                    _f.sent();
                    return [3 /*break*/, 5];
                case 3: throw new error_1.InvalidDeliveryMethodError("Can only add multiple handlers when deliveryMethod is Http. Invalid handler: ".concat(JSON.stringify(handler)));
                case 4:
                    _i++;
                    return [3 /*break*/, 1];
                case 5:
                    webhookRegistry[topic].push(handler);
                    return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=registry.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeSessionToken = void 0;
var tslib_1 = require("tslib");
var jose = tslib_1.__importStar(require("jose"));
var ShopifyErrors = tslib_1.__importStar(require("../error"));
var get_hmac_key_1 = require("../utils/get-hmac-key");
var JWT_PERMITTED_CLOCK_TOLERANCE = 10;
function decodeSessionToken(config) {
    var _this = this;
    return function (token) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var payload, error_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, jose.jwtVerify(token, (0, get_hmac_key_1.getHMACKey)(config.apiSecretKey), {
                            algorithms: ['HS256'],
                            clockTolerance: JWT_PERMITTED_CLOCK_TOLERANCE,
                        })];
                case 1:
                    payload = (_a.sent()).payload;
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    throw new ShopifyErrors.InvalidJwtError("Failed to parse session token '".concat(token, "': ").concat(error_1.message));
                case 3:
                    // The exp and nbf fields are validated by the JWT library
                    if (payload.aud !== config.apiKey) {
                        throw new ShopifyErrors.InvalidJwtError('Session token had invalid API key');
                    }
                    return [2 /*return*/, payload];
            }
        });
    }); };
}
exports.decodeSessionToken = decodeSessionToken;
//# sourceMappingURL=decode-session-token.js.map
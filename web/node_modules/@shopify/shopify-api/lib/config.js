"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateConfig = void 0;
var tslib_1 = require("tslib");
var error_1 = require("./error");
var types_1 = require("./types");
var scopes_1 = require("./auth/scopes");
function validateConfig(params) {
    var config = {
        apiKey: '',
        apiSecretKey: '',
        scopes: new scopes_1.AuthScopes([]),
        hostName: '',
        hostScheme: 'https',
        apiVersion: types_1.LATEST_API_VERSION,
        isEmbeddedApp: true,
        isPrivateApp: false,
        logger: {
            log: defaultLogFunction,
            level: types_1.LogSeverity.Info,
            httpRequests: false,
            timestamps: false,
        },
    };
    // Make sure that the essential params actually have content in them
    var mandatory = [
        'apiKey',
        'apiSecretKey',
        'scopes',
        'hostName',
    ];
    var missing = [];
    mandatory.forEach(function (key) {
        if (!notEmpty(params[key])) {
            missing.push(key);
        }
    });
    if (missing.length) {
        throw new error_1.ShopifyError("Cannot initialize Shopify API Library. Missing values for: ".concat(missing.join(', ')));
    }
    var hostScheme = params.hostScheme, isPrivateApp = params.isPrivateApp, userAgentPrefix = params.userAgentPrefix, logger = params.logger, privateAppStorefrontAccessToken = params.privateAppStorefrontAccessToken, customShopDomains = params.customShopDomains, billing = params.billing, mandatoryParams = tslib_1.__rest(params, ["hostScheme", "isPrivateApp", "userAgentPrefix", "logger", "privateAppStorefrontAccessToken", "customShopDomains", "billing"]);
    Object.assign(config, mandatoryParams, {
        hostName: params.hostName.replace(/\/$/, ''),
        scopes: params.scopes instanceof scopes_1.AuthScopes
            ? params.scopes
            : new scopes_1.AuthScopes(params.scopes),
        hostScheme: hostScheme !== null && hostScheme !== void 0 ? hostScheme : config.hostScheme,
        isPrivateApp: isPrivateApp === undefined ? config.isPrivateApp : isPrivateApp,
        userAgentPrefix: userAgentPrefix !== null && userAgentPrefix !== void 0 ? userAgentPrefix : config.userAgentPrefix,
        logger: tslib_1.__assign(tslib_1.__assign({}, config.logger), (logger || {})),
        privateAppStorefrontAccessToken: privateAppStorefrontAccessToken !== null && privateAppStorefrontAccessToken !== void 0 ? privateAppStorefrontAccessToken : config.privateAppStorefrontAccessToken,
        customShopDomains: customShopDomains !== null && customShopDomains !== void 0 ? customShopDomains : config.customShopDomains,
        billing: billing !== null && billing !== void 0 ? billing : config.billing,
    });
    return config;
}
exports.validateConfig = validateConfig;
function notEmpty(value) {
    if (value == null) {
        return false;
    }
    return typeof value === 'string' || Array.isArray(value)
        ? value.length > 0
        : true;
}
function defaultLogFunction(severity, message) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (severity) {
                case types_1.LogSeverity.Debug:
                    console.debug(message);
                    break;
                case types_1.LogSeverity.Info:
                    console.log(message);
                    break;
                case types_1.LogSeverity.Warning:
                    console.warn(message);
                    break;
                case types_1.LogSeverity.Error:
                    console.error(message);
                    break;
            }
            return [2 /*return*/];
        });
    });
}
//# sourceMappingURL=config.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = void 0;
var tslib_1 = require("tslib");
var types_1 = require("../types");
function log(config) {
    return function (severity, message, context) {
        if (context === void 0) { context = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var prefix, packageString, contextParts, suffix;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (severity > config.logger.level) {
                            return [2 /*return*/];
                        }
                        prefix = [];
                        if (config.logger.timestamps) {
                            prefix.push("".concat(new Date().toISOString().slice(0, -5), "Z"));
                        }
                        packageString = context.package || 'shopify-api';
                        delete context.package;
                        switch (severity) {
                            case types_1.LogSeverity.Debug:
                                packageString = "".concat(packageString, "/DEBUG");
                                break;
                            case types_1.LogSeverity.Info:
                                packageString = "".concat(packageString, "/INFO");
                                break;
                            case types_1.LogSeverity.Warning:
                                packageString = "".concat(packageString, "/WARNING");
                                break;
                            case types_1.LogSeverity.Error:
                                packageString = "".concat(packageString, "/ERROR");
                                break;
                        }
                        prefix.push(packageString);
                        contextParts = [];
                        Object.entries(context).forEach(function (_a) {
                            var _b = tslib_1.__read(_a, 2), key = _b[0], value = _b[1];
                            contextParts.push("".concat(key, ": ").concat(value));
                        });
                        suffix = '';
                        if (contextParts.length > 0) {
                            suffix = " | {".concat(contextParts.join(', '), "}");
                        }
                        return [4 /*yield*/, config.logger.log(severity, "[".concat(prefix.join('] ['), "] ").concat(message).concat(suffix))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
}
exports.log = log;
//# sourceMappingURL=log.js.map
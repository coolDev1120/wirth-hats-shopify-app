"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.graphqlClientClass = exports.GraphqlClient = void 0;
var tslib_1 = require("tslib");
var types_1 = require("../../types");
var http_client_1 = require("../http_client/http_client");
var types_2 = require("../http_client/types");
var logger_1 = require("../../logger");
var ShopifyErrors = tslib_1.__importStar(require("../../error"));
var GraphqlClient = /** @class */ (function () {
    function GraphqlClient(params) {
        this.baseApiPath = '/admin/api';
        var config = this.graphqlClass().config;
        if (!config.isPrivateApp && !params.session.accessToken) {
            throw new ShopifyErrors.MissingRequiredArgument('Missing access token when creating GraphQL client');
        }
        if (params.apiVersion) {
            var message = params.apiVersion === config.apiVersion
                ? "GraphQL client has a redundant API version override to the default ".concat(params.apiVersion)
                : "GraphQL client overriding default API version ".concat(config.apiVersion, " with ").concat(params.apiVersion);
            (0, logger_1.logger)(config).debug(message);
        }
        this.session = params.session;
        this.apiVersion = params.apiVersion;
        this.client = new (this.graphqlClass().HttpClient)({
            domain: this.session.shop,
        });
    }
    GraphqlClient.prototype.query = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var apiHeaders, path, dataType, result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if ((typeof params.data === 'string' && params.data.length === 0) ||
                            Object.entries(params.data).length === 0) {
                            throw new ShopifyErrors.MissingRequiredArgument('Query missing.');
                        }
                        apiHeaders = this.getApiHeaders();
                        params.extraHeaders = tslib_1.__assign(tslib_1.__assign({}, apiHeaders), params.extraHeaders);
                        path = "".concat(this.baseApiPath, "/").concat(this.apiVersion || this.graphqlClass().config.apiVersion, "/graphql.json");
                        if (typeof params.data === 'object') {
                            dataType = types_2.DataType.JSON;
                        }
                        else {
                            dataType = types_2.DataType.GraphQL;
                        }
                        return [4 /*yield*/, this.client.post(tslib_1.__assign({ path: path, type: dataType }, params))];
                    case 1:
                        result = _a.sent();
                        if (result.body.errors) {
                            throw new ShopifyErrors.GraphqlQueryError({
                                message: 'GraphQL query returned errors',
                                response: result.body,
                            });
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    GraphqlClient.prototype.getApiHeaders = function () {
        var _a;
        return _a = {},
            _a[types_1.ShopifyHeader.AccessToken] = this.graphqlClass().config.isPrivateApp
                ? this.graphqlClass().config.apiSecretKey
                : this.session.accessToken,
            _a;
    };
    GraphqlClient.prototype.graphqlClass = function () {
        return this.constructor;
    };
    return GraphqlClient;
}());
exports.GraphqlClient = GraphqlClient;
function graphqlClientClass(params) {
    var config = params.config;
    var HttpClient = params.HttpClient;
    if (!HttpClient) {
        HttpClient = (0, http_client_1.httpClientClass)(params.config);
    }
    var NewGraphqlClient = /** @class */ (function (_super) {
        tslib_1.__extends(NewGraphqlClient, _super);
        function NewGraphqlClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NewGraphqlClient.config = config;
        NewGraphqlClient.HttpClient = HttpClient;
        return NewGraphqlClient;
    }(GraphqlClient));
    Reflect.defineProperty(NewGraphqlClient, 'name', {
        value: 'GraphqlClient',
    });
    return NewGraphqlClient;
}
exports.graphqlClientClass = graphqlClientClass;
//# sourceMappingURL=graphql_client.js.map
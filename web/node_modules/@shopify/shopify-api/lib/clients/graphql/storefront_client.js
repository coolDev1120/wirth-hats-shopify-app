"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storefrontClientClass = exports.StorefrontClient = void 0;
var tslib_1 = require("tslib");
var version_1 = require("../../version");
var types_1 = require("../../types");
var http_client_1 = require("../http_client/http_client");
var session_1 = require("../../session/session");
var logger_1 = require("../../logger");
var graphql_client_1 = require("./graphql_client");
var StorefrontClient = /** @class */ (function (_super) {
    tslib_1.__extends(StorefrontClient, _super);
    function StorefrontClient(params) {
        var _this = this;
        var session = new session_1.Session({
            shop: params.domain,
            id: '',
            state: '',
            isOnline: true,
            accessToken: params.storefrontAccessToken,
        });
        _this = _super.call(this, { session: session, apiVersion: params.apiVersion }) || this;
        _this.baseApiPath = '/api';
        var config = _this.storefrontClass().config;
        if (params.apiVersion) {
            var message = params.apiVersion === config.apiVersion
                ? "Storefront client has a redundant API version override to the default ".concat(params.apiVersion)
                : "Storefront client overriding default API version ".concat(config.apiVersion, " with ").concat(params.apiVersion);
            (0, logger_1.logger)(config).debug(message);
        }
        _this.domain = params.domain;
        _this.storefrontAccessToken = params.storefrontAccessToken;
        return _this;
    }
    StorefrontClient.prototype.getApiHeaders = function () {
        var _a;
        var sdkVariant = types_1.LIBRARY_NAME.toLowerCase().split(' ').join('-');
        return _a = {},
            _a[types_1.ShopifyHeader.StorefrontAccessToken] = this.storefrontClass().config
                .isPrivateApp
                ? this.storefrontClass().config.privateAppStorefrontAccessToken ||
                    this.storefrontAccessToken
                : this.storefrontAccessToken,
            _a[types_1.ShopifyHeader.StorefrontSDKVariant] = sdkVariant,
            _a[types_1.ShopifyHeader.StorefrontSDKVersion] = version_1.SHOPIFY_API_LIBRARY_VERSION,
            _a;
    };
    StorefrontClient.prototype.storefrontClass = function () {
        return this.constructor;
    };
    return StorefrontClient;
}(graphql_client_1.GraphqlClient));
exports.StorefrontClient = StorefrontClient;
function storefrontClientClass(params) {
    var config = params.config;
    var HttpClient = params.HttpClient;
    if (!HttpClient) {
        HttpClient = (0, http_client_1.httpClientClass)(config);
    }
    var NewStorefrontClient = /** @class */ (function (_super) {
        tslib_1.__extends(NewStorefrontClient, _super);
        function NewStorefrontClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NewStorefrontClient.config = config;
        NewStorefrontClient.HttpClient = HttpClient;
        return NewStorefrontClient;
    }(StorefrontClient));
    Reflect.defineProperty(NewStorefrontClient, 'name', {
        value: 'StorefrontClient',
    });
    return NewStorefrontClient;
}
exports.storefrontClientClass = storefrontClientClass;
//# sourceMappingURL=storefront_client.js.map
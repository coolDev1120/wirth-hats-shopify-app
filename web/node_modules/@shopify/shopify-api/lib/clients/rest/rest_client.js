"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.restClientClass = exports.RestClient = void 0;
var tslib_1 = require("tslib");
var http_1 = require("../../../runtime/http");
var types_1 = require("../../types");
var ShopifyErrors = tslib_1.__importStar(require("../../error"));
var http_client_1 = require("../http_client/http_client");
var logger_1 = require("../../logger");
var RestClient = /** @class */ (function (_super) {
    tslib_1.__extends(RestClient, _super);
    function RestClient(params) {
        var _this = _super.call(this, { domain: params.session.shop }) || this;
        var config = _this.restClass().config;
        if (!config.isPrivateApp && !params.session.accessToken) {
            throw new ShopifyErrors.MissingRequiredArgument('Missing access token when creating REST client');
        }
        if (params.apiVersion) {
            var message = params.apiVersion === config.apiVersion
                ? "REST client has a redundant API version override to the default ".concat(params.apiVersion)
                : "REST client overriding default API version ".concat(config.apiVersion, " with ").concat(params.apiVersion);
            (0, logger_1.logger)(config).debug(message);
        }
        _this.session = params.session;
        _this.apiVersion = params.apiVersion;
        return _this;
    }
    RestClient.prototype.request = function (params) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var ret, link, pageInfo, links, links_1, links_1_1, link_1, parsedLink, linkRel, linkUrl, linkFields, linkPageToken;
            var _c, e_1, _d;
            return tslib_1.__generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        params.extraHeaders = tslib_1.__assign((_c = {}, _c[types_1.ShopifyHeader.AccessToken] = this.restClass().config.isPrivateApp
                            ? this.restClass().config.apiSecretKey
                            : this.session.accessToken, _c), params.extraHeaders);
                        return [4 /*yield*/, _super.prototype.request.call(this, params)];
                    case 1:
                        ret = _e.sent();
                        link = (0, http_1.getHeader)(ret.headers, 'link');
                        if (link !== undefined) {
                            pageInfo = {
                                limit: ((_a = params.query) === null || _a === void 0 ? void 0 : _a.limit)
                                    ? (_b = params.query) === null || _b === void 0 ? void 0 : _b.limit.toString()
                                    : RestClient.DEFAULT_LIMIT,
                            };
                            if (link) {
                                links = link.split(', ');
                                try {
                                    for (links_1 = tslib_1.__values(links), links_1_1 = links_1.next(); !links_1_1.done; links_1_1 = links_1.next()) {
                                        link_1 = links_1_1.value;
                                        parsedLink = link_1.match(RestClient.LINK_HEADER_REGEXP);
                                        if (!parsedLink) {
                                            continue;
                                        }
                                        linkRel = parsedLink[2];
                                        linkUrl = new URL(parsedLink[1]);
                                        linkFields = linkUrl.searchParams.get('fields');
                                        linkPageToken = linkUrl.searchParams.get('page_info');
                                        if (!pageInfo.fields && linkFields) {
                                            pageInfo.fields = linkFields.split(',');
                                        }
                                        if (linkPageToken) {
                                            switch (linkRel) {
                                                case 'previous':
                                                    pageInfo.previousPageUrl = parsedLink[1];
                                                    pageInfo.prevPage = this.buildRequestParams(parsedLink[1]);
                                                    break;
                                                case 'next':
                                                    pageInfo.nextPageUrl = parsedLink[1];
                                                    pageInfo.nextPage = this.buildRequestParams(parsedLink[1]);
                                                    break;
                                            }
                                        }
                                    }
                                }
                                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                finally {
                                    try {
                                        if (links_1_1 && !links_1_1.done && (_d = links_1.return)) _d.call(links_1);
                                    }
                                    finally { if (e_1) throw e_1.error; }
                                }
                            }
                            ret.pageInfo = pageInfo;
                        }
                        return [2 /*return*/, ret];
                }
            });
        });
    };
    RestClient.prototype.getRequestPath = function (path) {
        var cleanPath = _super.prototype.getRequestPath.call(this, path);
        if (cleanPath.startsWith('/admin')) {
            return "".concat(cleanPath.replace(/\.json$/, ''), ".json");
        }
        else {
            return "/admin/api/".concat(this.apiVersion || this.restClass().config.apiVersion).concat(cleanPath.replace(/\.json$/, ''), ".json");
        }
    };
    RestClient.prototype.restClass = function () {
        return this.constructor;
    };
    RestClient.prototype.buildRequestParams = function (newPageUrl) {
        var pattern = "^/admin/api/[^/]+/(.*).json$";
        var url = new URL(newPageUrl);
        var path = url.pathname.replace(new RegExp(pattern), '$1');
        return {
            path: path,
            query: Object.fromEntries(url.searchParams.entries()),
        };
    };
    RestClient.LINK_HEADER_REGEXP = /<([^<]+)>; rel="([^"]+)"/;
    RestClient.DEFAULT_LIMIT = '50';
    return RestClient;
}(http_client_1.HttpClient));
exports.RestClient = RestClient;
function restClientClass(params) {
    var config = params.config;
    var NewRestClient = /** @class */ (function (_super) {
        tslib_1.__extends(NewRestClient, _super);
        function NewRestClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NewRestClient.config = config;
        NewRestClient.scheme = 'https';
        return NewRestClient;
    }(RestClient));
    Reflect.defineProperty(NewRestClient, 'name', {
        value: 'RestClient',
    });
    return NewRestClient;
}
exports.restClientClass = restClientClass;
//# sourceMappingURL=rest_client.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.check = void 0;
var tslib_1 = require("tslib");
var graphql_client_1 = require("../clients/graphql/graphql_client");
var error_1 = require("../error");
function check(config) {
    return function (_a) {
        var session = _a.session, plans = _a.plans, _b = _a.isTest, isTest = _b === void 0 ? true : _b;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var GraphqlClient, client, plansArray;
            return tslib_1.__generator(this, function (_c) {
                if (!config.billing) {
                    throw new error_1.BillingError({
                        message: 'Attempted to look for purchases without billing configs',
                        errorData: [],
                    });
                }
                GraphqlClient = (0, graphql_client_1.graphqlClientClass)({ config: config });
                client = new GraphqlClient({ session: session });
                plansArray = Array.isArray(plans) ? plans : [plans];
                return [2 /*return*/, hasActivePayment({
                        plans: plansArray,
                        client: client,
                        isTest: isTest,
                    })];
            });
        });
    };
}
exports.check = check;
function hasActivePayment(_a) {
    var plans = _a.plans, client = _a.client, isTest = _a.isTest;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var installation, endCursor, currentInstallations;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    endCursor = null;
                    _b.label = 1;
                case 1: return [4 /*yield*/, client.query({
                        data: {
                            query: HAS_PAYMENTS_QUERY,
                            variables: { endCursor: endCursor },
                        },
                    })];
                case 2:
                    currentInstallations = _b.sent();
                    installation = currentInstallations.body.data.currentAppInstallation;
                    if (hasSubscription({ plans: plans, isTest: isTest, installation: installation }) ||
                        hasOneTimePayment({ plans: plans, isTest: isTest, installation: installation })) {
                        return [2 /*return*/, true];
                    }
                    endCursor = installation.oneTimePurchases.pageInfo.endCursor;
                    _b.label = 3;
                case 3:
                    if (installation === null || installation === void 0 ? void 0 : installation.oneTimePurchases.pageInfo.hasNextPage) return [3 /*break*/, 1];
                    _b.label = 4;
                case 4: return [2 /*return*/, false];
            }
        });
    });
}
function hasSubscription(_a) {
    var plans = _a.plans, isTest = _a.isTest, installation = _a.installation;
    return installation.activeSubscriptions.some(function (subscription) {
        return plans.includes(subscription.name) && (isTest || !subscription.test);
    });
}
function hasOneTimePayment(_a) {
    var plans = _a.plans, isTest = _a.isTest, installation = _a.installation;
    return installation.oneTimePurchases.edges.some(function (purchase) {
        return plans.includes(purchase.node.name) &&
            (isTest || !purchase.node.test) &&
            purchase.node.status === 'ACTIVE';
    });
}
var HAS_PAYMENTS_QUERY = "\n  query appSubscription($endCursor: String) {\n    currentAppInstallation {\n      activeSubscriptions {\n        name\n        test\n      }\n\n      oneTimePurchases(first: 250, sortKey: CREATED_AT, after: $endCursor) {\n        edges {\n          node {\n            name\n            test\n            status\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n";
//# sourceMappingURL=check.js.map
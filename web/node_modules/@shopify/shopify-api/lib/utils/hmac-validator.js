"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateHmac = exports.generateLocalHmac = void 0;
var tslib_1 = require("tslib");
var crypto_1 = require("../../runtime/crypto");
var types_1 = require("../../runtime/crypto/types");
var ShopifyErrors = tslib_1.__importStar(require("../error"));
var safe_compare_1 = require("../auth/oauth/safe-compare");
var processed_query_1 = tslib_1.__importDefault(require("./processed-query"));
function stringifyQuery(query) {
    var processedQuery = new processed_query_1.default();
    Object.keys(query)
        .sort(function (val1, val2) { return val1.localeCompare(val2); })
        .forEach(function (key) { return processedQuery.put(key, query[key]); });
    return processedQuery.stringify(true);
}
function generateLocalHmac(config) {
    var _this = this;
    return function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var hmac, query, queryString;
        return tslib_1.__generator(this, function (_a) {
            hmac = params.hmac, query = tslib_1.__rest(params, ["hmac"]);
            queryString = stringifyQuery(query);
            return [2 /*return*/, (0, crypto_1.createSHA256HMAC)(config.apiSecretKey, queryString, types_1.HashFormat.Hex)];
        });
    }); };
}
exports.generateLocalHmac = generateLocalHmac;
function validateHmac(config) {
    var _this = this;
    return function (query) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var hmac, localHmac;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!query.hmac) {
                        throw new ShopifyErrors.InvalidHmacError('Query does not contain an HMAC value.');
                    }
                    hmac = query.hmac;
                    return [4 /*yield*/, generateLocalHmac(config)(query)];
                case 1:
                    localHmac = _a.sent();
                    return [2 /*return*/, (0, safe_compare_1.safeCompare)(hmac, localHmac)];
            }
        });
    }); };
}
exports.validateHmac = validateHmac;
//# sourceMappingURL=hmac-validator.js.map
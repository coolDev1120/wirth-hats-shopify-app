"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeHost = exports.sanitizeShop = void 0;
var tslib_1 = require("tslib");
var error_1 = require("../error");
var decode_host_1 = require("../auth/decode-host");
function sanitizeShop(config) {
    return function (shop, throwOnInvalid) {
        if (throwOnInvalid === void 0) { throwOnInvalid = false; }
        var domainsRegex = ['myshopify\\.com', 'shopify\\.com', 'myshopify\\.io'];
        if (config.customShopDomains) {
            domainsRegex.push.apply(domainsRegex, tslib_1.__spreadArray([], tslib_1.__read(config.customShopDomains.map(function (regex) {
                return typeof regex === 'string' ? regex : regex.source;
            })), false));
        }
        var shopUrlRegex = new RegExp("^[a-zA-Z0-9][a-zA-Z0-9-_]*\\.(".concat(domainsRegex.join('|'), ")[/]*$"));
        var sanitizedShop = shopUrlRegex.test(shop) ? shop : null;
        if (!sanitizedShop && throwOnInvalid) {
            throw new error_1.InvalidShopError('Received invalid shop argument');
        }
        return sanitizedShop;
    };
}
exports.sanitizeShop = sanitizeShop;
function sanitizeHost(config) {
    return function (host, throwOnInvalid) {
        if (throwOnInvalid === void 0) { throwOnInvalid = false; }
        var base64regex = /^[0-9a-zA-Z+/]+={0,2}$/;
        var sanitizedHost = base64regex.test(host) ? host : null;
        if (sanitizedHost) {
            var url = new URL("https://".concat((0, decode_host_1.decodeHost)(sanitizedHost)));
            if (!sanitizeShop(config)(url.hostname, false)) {
                sanitizedHost = null;
            }
        }
        if (!sanitizedHost && throwOnInvalid) {
            throw new error_1.InvalidHostError('Received invalid host argument');
        }
        return sanitizedHost;
    };
}
exports.sanitizeHost = sanitizeHost;
//# sourceMappingURL=shop-validator.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cookies = void 0;
var tslib_1 = require("tslib");
// import type {Headers} from "./headers";
var utils_1 = require("../crypto/utils");
var utils_2 = require("./utils");
var headers_1 = require("./headers");
var Cookies = /** @class */ (function () {
    function Cookies(request, response, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.keys, keys = _c === void 0 ? [] : _c;
        var _d, _e;
        this.response = response;
        this.receivedCookieJar = {};
        this.outgoingCookieJar = {};
        this.keys = [];
        if (keys)
            this.keys = keys;
        var cookieReqHdr = (_d = (0, headers_1.getHeader)(request.headers, 'Cookie')) !== null && _d !== void 0 ? _d : '';
        this.receivedCookieJar = Cookies.parseCookies(cookieReqHdr.split(';'));
        var cookieResHdr = (_e = (0, headers_1.getHeaders)(response.headers, 'Set-Cookie')) !== null && _e !== void 0 ? _e : [];
        this.outgoingCookieJar = Cookies.parseCookies(cookieResHdr);
    }
    Cookies.parseCookies = function (hdrs) {
        var e_1, _a;
        var entries = hdrs
            .filter(function (hdr) { return hdr.trim().length > 0; })
            .map(function (cookieDef) {
            var _a = tslib_1.__read(cookieDef.split(';')), keyval = _a[0], opts = _a.slice(1);
            var _b = tslib_1.__read((0, utils_2.splitN)(keyval, '=', 2).map(function (value) {
                return value.trim();
            }), 2), name = _b[0], value = _b[1];
            return [
                name,
                tslib_1.__assign({ name: name, value: value }, Object.fromEntries(opts.map(function (opt) {
                    return (0, utils_2.splitN)(opt, '=', 2).map(function (value) { return value.trim(); });
                }))),
            ];
        });
        var jar = Object.fromEntries(entries);
        try {
            for (var _b = tslib_1.__values(Object.values(jar)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var cookie = _c.value;
                if (typeof cookie.expires === 'string') {
                    cookie.expires = new Date(cookie.expires);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return jar;
    };
    Cookies.encodeCookie = function (data) {
        var result = '';
        result += "".concat(data.name, "=").concat(data.value, ";");
        result += Object.entries(data)
            .filter(function (_a) {
            var _b = tslib_1.__read(_a, 1), key = _b[0];
            return !['name', 'value', 'expires'].includes(key);
        })
            .map(function (_a) {
            var _b = tslib_1.__read(_a, 2), key = _b[0], value = _b[1];
            return "".concat(key, "=").concat(value);
        })
            .join('; ');
        if (data.expires) {
            result += ';';
            result += "expires=".concat(data.expires.toUTCString());
        }
        return result;
    };
    Cookies.prototype.toHeaders = function () {
        return Object.values(this.outgoingCookieJar).map(function (cookie) {
            return Cookies.encodeCookie(cookie);
        });
    };
    Cookies.prototype.updateHeader = function () {
        var _this = this;
        if (!this.response.headers) {
            this.response.headers = {};
        }
        (0, headers_1.removeHeader)(this.response.headers, 'Set-Cookie');
        this.toHeaders().map(function (hdr) {
            return (0, headers_1.addHeader)(_this.response.headers, 'Set-Cookie', hdr);
        });
    };
    Cookies.prototype.get = function (name) {
        var _a;
        return (_a = this.receivedCookieJar[name]) === null || _a === void 0 ? void 0 : _a.value;
    };
    Cookies.prototype.deleteCookie = function (name) {
        this.set(name, '', {
            path: '/',
            expires: new Date(0),
        });
    };
    Cookies.prototype.getAndVerify = function (name) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var value;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        value = this.get(name);
                        if (!value)
                            return [2 /*return*/, undefined];
                        return [4 /*yield*/, this.isSignedCookieValid(name)];
                    case 1:
                        if (!(_a.sent())) {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/, value];
                }
            });
        });
    };
    Object.defineProperty(Cookies.prototype, "canSign", {
        get: function () {
            var _a;
            return ((_a = this.keys) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
    });
    Cookies.prototype.set = function (name, value, opts) {
        if (opts === void 0) { opts = {}; }
        this.outgoingCookieJar[name] = tslib_1.__assign(tslib_1.__assign({}, opts), { name: name, value: value });
        this.updateHeader();
    };
    Cookies.prototype.setAndSign = function (name, value, opts) {
        if (opts === void 0) { opts = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var sigName, signature;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.canSign) {
                            throw Error('No keys provided for signing.');
                        }
                        this.set(name, value, opts);
                        sigName = "".concat(name, ".sig");
                        return [4 /*yield*/, (0, utils_1.createSHA256HMAC)(this.keys[0], value)];
                    case 1:
                        signature = _a.sent();
                        this.set(sigName, signature, opts);
                        this.updateHeader();
                        return [2 /*return*/];
                }
            });
        });
    };
    Cookies.prototype.isSignedCookieValid = function (cookieName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var signedCookieName, value, signature, allCheckSignatures;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        signedCookieName = "".concat(cookieName, ".sig");
                        // No cookie or no signature cookie makes the cookie it invalid.
                        if (!this.get(cookieName) || !this.get(signedCookieName)) {
                            this.deleteCookie(signedCookieName);
                            this.deleteCookie(cookieName);
                            return [2 /*return*/, false];
                        }
                        value = this.get(cookieName);
                        signature = this.get(signedCookieName);
                        return [4 /*yield*/, Promise.all(this.keys.map(function (key) { return (0, utils_1.createSHA256HMAC)(key, value); }))];
                    case 1:
                        allCheckSignatures = _a.sent();
                        if (!allCheckSignatures.includes(signature)) {
                            this.deleteCookie(signedCookieName);
                            this.deleteCookie(cookieName);
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/, true];
                }
            });
        });
    };
    return Cookies;
}());
exports.Cookies = Cookies;
//# sourceMappingURL=cookies.js.map